[{"/Users/charanbasireddy/ColorNet-WebApp/src/index.js":"1","/Users/charanbasireddy/ColorNet-WebApp/src/App.js":"2","/Users/charanbasireddy/ColorNet-WebApp/src/reportWebVitals.js":"3","/Users/charanbasireddy/ColorNet-WebApp/src/components/FileUpload.js":"4"},{"size":535,"mtime":1691182812134,"results":"5","hashOfConfig":"6"},{"size":509,"mtime":1691182812132,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1691182812135,"results":"8","hashOfConfig":"6"},{"size":13681,"mtime":1691270673825,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"2mxpmv",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/charanbasireddy/ColorNet-WebApp/src/index.js",[],[],[],"/Users/charanbasireddy/ColorNet-WebApp/src/App.js",[],[],"/Users/charanbasireddy/ColorNet-WebApp/src/reportWebVitals.js",[],[],"/Users/charanbasireddy/ColorNet-WebApp/src/components/FileUpload.js",["24","25","26","27","28","29"],[],"import React from 'react';\nimport colorNetLogo from '../colorNetLogo.jpg'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Row, Col, Container } from \"react-bootstrap\";\nimport CardGroup from 'react-bootstrap';\n\nimport Carousel from 'react-bootstrap/Carousel';\nimport Button from 'react-bootstrap/Button';\nimport '../App.css';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imageURL: '',\n      imageName: '',\n      correctedImageName: '',\n      test_imageURL: '/root/file-upload/uploads/test_docs/thumb1.jpg',\n      correctedImage: null,\n      correctedImageURL: '',\n      // file: null,\n      file: colorNetLogo,\n      // file: = {process.env.PUBLIC_URL + '/orange.png'},\n      correctedFile:null,\n      //following line is correct initial setup, going to try and have placeholder image here too\n      // correctedImageBinary: null\n      //following line is jsut testing\n      // uploadInput: [],\n      files: null,\n      correctImageNamesArray: [],\n      correctImagesList: [],\n      //very perplexed by how I should go about ensuring that the names and images are in line\n      // i probably need to make a list of dicts so that everything stays together nicely.\n      correctImageBinaryArray: [],\n      index : 0,\n      // setIndex : 0,\n\n      // handleSelect : (selectedIndex, e) => {\n      //   setIndex(selectedIndex);\n      // }\n    };\n\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdateImage = this.handleUpdateImage.bind(this);\n    this.handleUpdateImage2 = this.handleUpdateImage2.bind(this);\n    this.handleUpdateImage3 = this.handleUpdateImage3.bind(this);\n    this.imageErrorFunction = this.imageErrorFunction(this);\n    this.handleUploadImageMultiple = this.handleUploadImageMultiple.bind(this);\n    this.handleUploadImageMultiSingle = this.handleUploadImageMultiSingle.bind(this);\n    this.handleDownloadFiles = this.handleDownloadFiles.bind(this);\n\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleFindIndex = this.handleFindIndex.bind(this);\n\n\n  }\n\n  handleSelect(selectedIndex, e) {\n    this.setState({\n      index: selectedIndex,\n    });\n  }\n  \n\n  imageErrorFunction(event){\n    console.log(\"error again\")\n  }\n\n  //This is for displaying the initial image\n  handleChange(event){\n    console.log(event.target.files[0])\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0])\n  \n    })\n  }\n\n  handleFindIndex(fileName){\n    for(let i = 0; i < ((this.state.correctImageNamesArray).length); i++){\n      if(this.state.correctImageNamesArray[i] == fileName){\n        return i;\n      }\n    }\n  }\n  //i am pretty sure this is updating the image as it fails the get request after the fact \n  //This does not really work well, inexplicably fails pretty often.\n  handleUpdateImage(fileName){\n    console.log(fileName)\n    setTimeout(() =>  { this.setState({\n      correctedImageURL: `${process.env.PUBLIC_URL}/corrected_images/${fileName}`\n      // correctedFile: URL.createObjectURL((this.correctedImageURL).blob())\n    })  \n      //this.state.correctedFile = URL.createObjectURL((this.correctedImageURL).blob())\n      // fetch(this.state.correctedImageURL)\n      // .then(res => res.blob())\n      // .then(blob => {\n      //   this.state.correctedFile = URL.createObjectURL(blob);\n        \n      // })\n    }, 3000);\n    console.log(`${process.env.PUBLIC_URL}/corrected_images/${fileName}`)\n  }\n\n  handleUpdateImage2(fileName){\n    console.log(\"updateImage2 called\");\n    //I know that this is not at all proper, this is more just testing the endpoint it it cna receive the calls correctly.\n    //this.correctedImageURL = fetch('/api/getImage?image=' + fileName, {method: 'GET'});\n    fetch('/api/getImage?image=' + fileName, {method: 'GET'}).then((response) => {\n      response.json().then((body) => {\n        console.log(\"inside fetch\");\n        console.log(body.msg)\n        // this.state.correctedImageBinary = body.img\n        this.setState({correctedImageBinary: body.img})\n      });\n    });\n  }\n\n  handleUpdateImage3(fileName){\n    console.log(\"updateImage3 called\");\n    //I know that this is not at all proper, this is more just testing the endpoint it it cna receive the calls correctly.\n    //this.correctedImageURL = fetch('/api/getImage?image=' + fileName, {method: 'GET'});\n    fetch('/api/getImage?image=' + fileName, {method: 'GET'}).then((response) => {\n      response.json().then((body) => {\n        var currentIndex = -1;\n        for(let i = 0; i < ((this.state.correctImageNamesArray).length); i++){\n          if(this.state.correctImageNamesArray[i] == fileName){\n            currentIndex = i;\n          }\n        }\n\n        // this.setState({correctedImageBinary: body.img})\n        // this.setState({correctImageBinaryArray[currentIndex]: body.img})\n        // console.log(\"binary  update: \" + body.img);\n        this.state.correctImageBinaryArray[currentIndex] = body.img;\n      });\n    });\n  }\n\n  // working post method\n  handleUploadImage(ev) {\n    ev.preventDefault();\n    console.log(\"hey\")\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n    fetch('/api/upload', {\n      method: 'POST',\n      body: data,\n      'Content-Type': 'image/*',\n    }).then((response) => {\n      response.json().then((body) => {\n        // this.setState({ imageURL: `../../../uploads/test_docs/${body.file}` });\n        console.log(body)\n        this.setState({correctedImageName: `${body.CorrectedFileName}`})\n        //this.setState({correctedImage: })\n        console.log(\"new correctedImageName: \")\n        // this is the one which i have been using //this.handleUpdateImage(body.CorrectedFileName)\n        //Subsequent line is new attempt\n        this.handleUpdateImage2(body.CorrectedFileName)\n      });\n    });\n    console.log(\"finish\")\n  }\n\n  handleUploadImageMultiSingle(){\n    console.log(\"multi single func\");\n    console.log((this.uploadInput.files).length);\n    this.setState({correctImageNamesArray: []});\n\n    //TODO gotta make a few more changes to ensure it is using the array of filenames/image data\n    for(let i = 0; i < ((this.uploadInput.files).length); i++){\n      const data = new FormData();\n      data.append('file', this.uploadInput.files[i]);\n      fetch('/api/upload', {\n        method: 'POST',\n        body: data,\n      }).then((response) => {\n        response.json().then((body) => {\n          console.log(body);\n          this.setState({correctImageBinaryArray: [...this.state.correctImageBinaryArray, 'placeholder']})\n          this.setState({correctImageNamesArray: [...this.state.correctImageNamesArray, `${body.CorrectedFileName}`]})\n          this.handleUpdateImage3(body.CorrectedFileName)\n        });\n      });\n    }\n    console.log(this.state.correctImageNamesArray);\n    console.log(\"binaryArray _\"+ this.state.correctImageBinaryArray + \"_\")\n  }\n\n  handleDownloadFiles(){\n    console.log(\"inside download function\");\n    console.log(this.state.correctImageNamesArray);\n    for(let i = 0; i < ((this.state.correctImageNamesArray).length); i++){\n      fetch('/api/downloadImage?image=' + this.state.correctImageNamesArray[i], {method: 'GET'})\n      .then(response => response.blob())\n      .then(blob => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement('a');\n          a.href = url;\n          // a.download = \"filename.xlsx\";\n          a.download = this.state.correctImageNamesArray[i]\n          document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n          a.click();    \n          a.remove();\n      });\n    }\n  }\n\n  handleUploadImageMultiple() {\n    console.log(\"in multiple\");\n    const data = new FormData();\n    console.log((this.uploadInput.files).length);\n    data.append('numImages', (this.uploadInput.files).length);\n    for(let i = 0; i< (this.uploadInput.files).length; i++){\n      console.log(this.uploadInput.files[i]);\n      // data.append('file', this.uploadInput.files[i]);\n      // data.append('filename', this.fileName.value);\n      this.currentImageKey = \"image\" + i;\n      // console.log(this.currentImageKey);\n      data.append(this.currentImageKey, this.uploadInput.files[i]);\n\n    }\n    // console.log(data);\n    fetch('/api/uploadMultiple', {\n      method: 'POST',\n      body: data,\n    }).then((response) => {\n      response.json().then((body) => {\n        console.log(body);\n      });\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"inputButton\">\n          <input variant=\"primary\" ref={(ref) => { this.uploadInput = ref; }} type=\"file\"  onChange={this.handleChange} multiple />\n          {/* <input type=\"file\" onChange={this.handleChange} /> */}\n        </div>\n        <br />\n        {/* Multiple image upload, does work now*/}\n        {/* <div>\n          <button type=\"button\" onClick={() => {this.handleUploadImageMultiple()}}>Process Multiple</button>\n        </div> */}\n        {/* Following is working implementation for single images */}\n        {/* <div>\n          <button type=\"button\" onClick={this.handleUploadImage}>Process</button>\n        </div> */}\n        {/*Multi Single image upload*/}\n        <div className=\"centerButton\">\n          <button variant=\"secondary\" type=\"button\" onClick={this.handleUploadImageMultiSingle}>Process Multiple</button>\n        </div>\n\n        {/* FOLLOWING LINE IS PROPER FUNCITONALITY */}\n        {/* <img src = {this.state.file} alt = \"original\"/> */}\n        <p> {this.state.correctedImageName} </p>\n        {/* <img src = {`${process.env.PUBLIC_URL}/corrected_images/${this.state.correctedImageURL}`} alt = \"corrected image\" /> */}\n        \n        {/* TODO FOLLOWING LINE IS WHAT USED TO WORK BEFORE GET FUNC */}\n        {/* <img src = {this.state.correctedImageURL} alt = \"corrected\"/> */}\n        {/* <img src = {this.state.correctedFile} alt = \"Corrected Image\"/> */}\n\n        {/* CORR FOLLOWING LINE IS NEW PROPER FUNCTIONALITY */}\n        {/* {this.state.correctedImageBinary ? <img src={`data:image/jpg;base64,${this.state.correctedImageBinary}`}/>: ''} */}\n        \n        <br/>\n\n        {/* <div className=\"CompareImage\">\n        {/* <div style={{maxWidth: '600px'}}> */}\n        {/*  <ReactCompareImage leftImage = {this.state.file} rightImage = {`data:image/jpg;base64,${this.state.correctedImageBinary}`} />\n        </div> */}\n\n        {/* <Container>\n          <Row>\n            {this.state.correctImageNamesArray.map((k) => (\n              <Col key={k} xs={12} md={4} lg={3}>\n                <Card>\n                  <Card.Img src=\"https://via.placeholder.com/150x75\"/>\n\n                  <Card.Body>\n                    <Card.Title> {this.state.correctImageNamesArray[k]} </Card.Title>\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Container> */}\n        {/* <Container  style={{maxWidth: '100%', height: 'auto'}}> */}\n        <Container className=\"CaroContainer\"> \n          {/* <Carousel variant=\"dark\" activeIndex={this.state.index} onSelect={this.state.handleSelect}> */}\n          {/* <Carousel variant=\"dark\" onSelect={this.handleSelect()}> */}\n          <Carousel className=\"CaroCarousel\" variant=\"dark\" slide={false} touch={true} interval={null} activeIndex={this.state.index} onSelect={this.handleSelect}>\n            {/*working implementation, just want to test and play around {this.state.correctImageNamesArray.map((k) => ( */}\n            {this.state.correctImageNamesArray.map(() => (\n              <Carousel.Item className=\"CaroItem\">\n                {/* <img src=\"https://via.placeholder.com/150x75\"/> */}\n                <div >\n                  <img className=\"CaroImage\" src={`data:image/jpg;base64,${this.state.correctImageBinaryArray[this.state.index]}`}/>\n                  {/* <ReactCompareImage leftImage = {this.uploadInput.files[this.state.index]} rightImage = {`data:image/jpg;base64,${this.state.correctImageBinaryArray[this.state.index]}`} /> */}\n                </div>\n                <Carousel.Caption>\n                  {/* Deliberately removed<p>{this.state.correctImageNamesArray[this.state.index]}</p> */}\n                  {console.log(\"index \" + this.state.index)}\n                </Carousel.Caption>\n              </Carousel.Item>\n            ))}\n          </Carousel>\n        </Container>\n\n        <br/>\n        {/* <CardGroup>\n          {this.state.correctImageNamesArray.map(() => (\n              <Card>\n                <Card.Img src\n              </Card>\n          ))}\n        </CardGroup> */}\n        <Container>\n          <Row>\n            {this.state.correctImageNamesArray.map((k) => (\n              <Col key={k} xs={12} md={4} lg={3}>\n                <Card onChange={console.log(k + \" Clicked!\")}>\n                  {/* {cardDataIndex = this.handleFindIndex(k)} */}\n                  <Card.Img src={`data:image/jpg;base64,${this.state.correctImageBinaryArray[this.handleFindIndex(k)]}`}/>\n                  {console.log(\"k: \" + k + \" cardDataIndex: \" + this.handleFindIndex(k))}\n\n                  <Card.Body>\n                    <Card.Title> {this.state.correctImageNamesArray[this.handleFindIndex(k)]} </Card.Title>\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Container>\n\n        {/* <div>\n          <button type=\"button\" >Share</button>\n        </div> */}\n        <br/>\n        <div className=\"centerButton\">\n          <button type=\"button\" onClick={this.handleDownloadFiles}>Download Images</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;",{"ruleId":"30","severity":1,"message":"31","line":5,"column":8,"nodeType":"32","messageId":"33","endLine":5,"endColumn":17},{"ruleId":"30","severity":1,"message":"34","line":8,"column":8,"nodeType":"32","messageId":"33","endLine":8,"endColumn":14},{"ruleId":"35","severity":1,"message":"36","line":82,"column":47,"nodeType":"37","messageId":"38","endLine":82,"endColumn":49},{"ruleId":"35","severity":1,"message":"36","line":128,"column":51,"nodeType":"37","messageId":"38","endLine":128,"endColumn":53},{"ruleId":"39","severity":1,"message":"40","line":136,"column":9,"nodeType":"41","messageId":"42","endLine":136,"endColumn":43},{"ruleId":"43","severity":1,"message":"44","line":301,"column":19,"nodeType":"45","endLine":301,"endColumn":133},"no-unused-vars","'CardGroup' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]