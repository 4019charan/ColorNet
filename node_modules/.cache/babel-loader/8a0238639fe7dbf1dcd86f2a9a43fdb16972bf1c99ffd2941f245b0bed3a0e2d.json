{"ast":null,"code":"var _jsxFileName = \"/Users/charanbasireddy/ColorNet-WebApp/src/components/FileUpload.js\";\nimport React from 'react';\nimport colorNetLogo from '../colorNetLogo.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Row, Col, Container } from \"react-bootstrap\";\n//import CardGroup from 'react-bootstrap';\n\nimport Carousel from 'react-bootstrap/Carousel';\n//import Button from 'react-bootstrap/Button';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageURL: '',\n      imageName: '',\n      correctedImageName: '',\n      test_imageURL: '/root/file-upload/uploads/test_docs/thumb1.jpg',\n      correctedImage: null,\n      correctedImageURL: '',\n      // file: null,\n      file: colorNetLogo,\n      // file: = {process.env.PUBLIC_URL + '/orange.png'},\n      correctedFile: null,\n      //following line is correct initial setup, going to try and have placeholder image here too\n      // correctedImageBinary: null\n      //following line is jsut testing\n      // uploadInput: [],\n      files: null,\n      correctImageNamesArray: [],\n      correctImagesList: [],\n      //very perplexed by how I should go about ensuring that the names and images are in line\n      // i probably need to make a list of dicts so that everything stays together nicely.\n      correctImageBinaryArray: [],\n      index: 0\n      // setIndex : 0,\n\n      // handleSelect : (selectedIndex, e) => {\n      //   setIndex(selectedIndex);\n      // }\n    };\n\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdateImage = this.handleUpdateImage.bind(this);\n    this.handleUpdateImage2 = this.handleUpdateImage2.bind(this);\n    this.handleUpdateImage3 = this.handleUpdateImage3.bind(this);\n    this.imageErrorFunction = this.imageErrorFunction(this);\n    this.handleUploadImageMultiple = this.handleUploadImageMultiple.bind(this);\n    this.handleUploadImageMultiSingle = this.handleUploadImageMultiSingle.bind(this);\n    this.handleDownloadFiles = this.handleDownloadFiles.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleFindIndex = this.handleFindIndex.bind(this);\n  }\n  handleSelect(selectedIndex, e) {\n    this.setState({\n      index: selectedIndex\n    });\n  }\n  imageErrorFunction(event) {\n    console.log(\"error again\");\n  }\n\n  //This is for displaying the initial image\n  handleChange(event) {\n    console.log(event.target.files[0]);\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0])\n    });\n  }\n  handleFindIndex(fileName) {\n    for (let i = 0; i < this.state.correctImageNamesArray.length; i++) {\n      if (this.state.correctImageNamesArray[i] === fileName) {\n        return i;\n      }\n    }\n  }\n  //i am pretty sure this is updating the image as it fails the get request after the fact \n  //This does not really work well, inexplicably fails pretty often.\n  handleUpdateImage(fileName) {\n    console.log(fileName);\n    setTimeout(() => {\n      this.setState({\n        correctedImageURL: `${process.env.PUBLIC_URL}/corrected_images/${fileName}`\n        // correctedFile: URL.createObjectURL((this.correctedImageURL).blob())\n      });\n      //this.state.correctedFile = URL.createObjectURL((this.correctedImageURL).blob())\n      // fetch(this.state.correctedImageURL)\n      // .then(res => res.blob())\n      // .then(blob => {\n      //   this.state.correctedFile = URL.createObjectURL(blob);\n\n      // })\n    }, 3000);\n    console.log(`${process.env.PUBLIC_URL}/corrected_images/${fileName}`);\n  }\n  handleUpdateImage2(fileName) {\n    console.log(\"updateImage2 called\");\n    //I know that this is not at all proper, this is more just testing the endpoint it it cna receive the calls correctly.\n    //this.correctedImageURL = fetch('/api/getImage?image=' + fileName, {method: 'GET'});\n    fetch('/api/getImage?image=' + fileName, {\n      method: 'GET'\n    }).then(response => {\n      response.json().then(body => {\n        console.log(\"inside fetch\");\n        console.log(body.msg);\n        // this.state.correctedImageBinary = body.img\n        this.setState({\n          correctedImageBinary: body.img\n        });\n      });\n    });\n  }\n  handleUpdateImage3(fileName) {\n    console.log(\"updateImage3 called\");\n    //I know that this is not at all proper, this is more just testing the endpoint it it cna receive the calls correctly.\n    //this.correctedImageURL = fetch('/api/getImage?image=' + fileName, {method: 'GET'});\n    fetch('/api/getImage?image=' + fileName, {\n      method: 'GET'\n    }).then(response => {\n      response.json().then(body => {\n        var currentIndex = -1;\n        for (let i = 0; i < this.state.correctImageNamesArray.length; i++) {\n          if (this.state.correctImageNamesArray[i] === fileName) {\n            currentIndex = i;\n          }\n        }\n\n        // this.setState({correctedImageBinary: body.img})\n        // this.setState({correctImageBinaryArray[currentIndex]: body.img})\n        // console.log(\"binary  update: \" + body.img);\n        const updatedArray = [...this.state.correctImageBinaryArray];\n\n        // Update the value at the specified index\n        updatedArray[currentIndex] = body.img;\n\n        // Now, use setState() to update the state with the new array\n        this.setState({\n          correctImageBinaryArray: updatedArray\n        });\n        //this.state.correctImageBinaryArray[currentIndex] = body.img;\n      });\n    });\n  }\n\n  // working post method\n  handleUploadImage(ev) {\n    ev.preventDefault();\n    console.log(\"hey\");\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n    fetch('/api/upload', {\n      method: 'POST',\n      body: data,\n      'Content-Type': 'image/*'\n    }).then(response => {\n      response.json().then(body => {\n        // this.setState({ imageURL: `../../../uploads/test_docs/${body.file}` });\n        console.log(body);\n        this.setState({\n          correctedImageName: `${body.CorrectedFileName}`\n        });\n        //this.setState({correctedImage: })\n        console.log(\"new correctedImageName: \");\n        // this is the one which i have been using //this.handleUpdateImage(body.CorrectedFileName)\n        //Subsequent line is new attempt\n        this.handleUpdateImage2(body.CorrectedFileName);\n      });\n    });\n    console.log(\"finish\");\n  }\n  handleUploadImageMultiSingle() {\n    console.log(\"multi single func\");\n    console.log(this.uploadInput.files.length);\n    this.setState({\n      correctImageNamesArray: []\n    });\n\n    //TODO gotta make a few more changes to ensure it is using the array of filenames/image data\n    for (let i = 0; i < this.uploadInput.files.length; i++) {\n      const data = new FormData();\n      data.append('file', this.uploadInput.files[i]);\n      fetch('/api/upload', {\n        method: 'POST',\n        body: data\n      }).then(response => {\n        response.json().then(body => {\n          console.log(body);\n          this.setState({\n            correctImageBinaryArray: [...this.state.correctImageBinaryArray, 'placeholder']\n          });\n          this.setState({\n            correctImageNamesArray: [...this.state.correctImageNamesArray, `${body.CorrectedFileName}`]\n          });\n          this.handleUpdateImage3(body.CorrectedFileName);\n        });\n      });\n    }\n    console.log(this.state.correctImageNamesArray);\n    console.log(\"binaryArray _\" + this.state.correctImageBinaryArray + \"_\");\n  }\n  handleDownloadFiles() {\n    console.log(\"inside download function\");\n    console.log(this.state.correctImageNamesArray);\n    for (let i = 0; i < this.state.correctImageNamesArray.length; i++) {\n      fetch('/api/downloadImage?image=' + this.state.correctImageNamesArray[i], {\n        method: 'GET'\n      }).then(response => response.blob()).then(blob => {\n        var url = window.URL.createObjectURL(blob);\n        var a = document.createElement('a');\n        a.href = url;\n        // a.download = \"filename.xlsx\";\n        a.download = this.state.correctImageNamesArray[i];\n        document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n        a.click();\n        a.remove();\n      });\n    }\n  }\n  handleUploadImageMultiple() {\n    console.log(\"in multiple\");\n    const data = new FormData();\n    console.log(this.uploadInput.files.length);\n    data.append('numImages', this.uploadInput.files.length);\n    for (let i = 0; i < this.uploadInput.files.length; i++) {\n      console.log(this.uploadInput.files[i]);\n      // data.append('file', this.uploadInput.files[i]);\n      // data.append('filename', this.fileName.value);\n      this.currentImageKey = \"image\" + i;\n      // console.log(this.currentImageKey);\n      data.append(this.currentImageKey, this.uploadInput.files[i]);\n    }\n    // console.log(data);\n    fetch('/api/uploadMultiple', {\n      method: 'POST',\n      body: data\n    }).then(response => {\n      response.json().then(body => {\n        console.log(body);\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputButton\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          variant: \"primary\",\n          ref: ref => {\n            this.uploadInput = ref;\n          },\n          type: \"file\",\n          onChange: this.handleChange,\n          multiple: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centerButton\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          variant: \"secondary\",\n          type: \"button\",\n          onClick: this.handleUploadImageMultiSingle,\n          children: \"Process Multiple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", this.state.correctedImageName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        className: \"CaroContainer\",\n        children: /*#__PURE__*/_jsxDEV(Carousel, {\n          className: \"CaroCarousel\",\n          variant: \"dark\",\n          slide: false,\n          touch: true,\n          interval: null,\n          activeIndex: this.state.index,\n          onSelect: this.handleSelect,\n          children: this.state.correctImageNamesArray.map(() => /*#__PURE__*/_jsxDEV(Carousel.Item, {\n            className: \"CaroItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"CaroImage\",\n                src: `data:image/jpg;base64,${this.state.correctImageBinaryArray[this.state.index]}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Carousel.Caption, {\n              children: console.log(\"index \" + this.state.index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: this.state.correctImageNamesArray.map(k => /*#__PURE__*/_jsxDEV(Col, {\n            xs: 12,\n            md: 4,\n            lg: 3,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              onChange: console.log(k + \" Clicked!\"),\n              children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                src: `data:image/jpg;base64,${this.state.correctImageBinaryArray[this.handleFindIndex(k)]}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 19\n              }, this), console.log(\"k: \" + k + \" cardDataIndex: \" + this.handleFindIndex(k)), /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: /*#__PURE__*/_jsxDEV(Card.Title, {\n                  children: [\" \", this.state.correctImageNamesArray[this.handleFindIndex(k)], \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this)\n          }, k, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centerButton\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.handleDownloadFiles,\n          children: \"Download Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Main;","map":{"version":3,"names":["React","colorNetLogo","Card","Row","Col","Container","Carousel","jsxDEV","_jsxDEV","Main","Component","constructor","props","state","imageURL","imageName","correctedImageName","test_imageURL","correctedImage","correctedImageURL","file","correctedFile","files","correctImageNamesArray","correctImagesList","correctImageBinaryArray","index","handleUploadImage","bind","handleChange","handleUpdateImage","handleUpdateImage2","handleUpdateImage3","imageErrorFunction","handleUploadImageMultiple","handleUploadImageMultiSingle","handleDownloadFiles","handleSelect","handleFindIndex","selectedIndex","e","setState","event","console","log","target","URL","createObjectURL","fileName","i","length","setTimeout","process","env","PUBLIC_URL","fetch","method","then","response","json","body","msg","correctedImageBinary","img","currentIndex","updatedArray","ev","preventDefault","data","FormData","append","uploadInput","CorrectedFileName","blob","url","window","a","document","createElement","href","download","appendChild","click","remove","currentImageKey","render","children","className","variant","ref","type","onChange","multiple","_jsxFileName","lineNumber","columnNumber","onClick","slide","touch","interval","activeIndex","onSelect","map","Item","src","Caption","k","xs","md","lg","Img","Body","Title"],"sources":["/Users/charanbasireddy/ColorNet-WebApp/src/components/FileUpload.js"],"sourcesContent":["import React from 'react';\nimport colorNetLogo from '../colorNetLogo.jpg'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Row, Col, Container } from \"react-bootstrap\";\n//import CardGroup from 'react-bootstrap';\n\nimport Carousel from 'react-bootstrap/Carousel';\n//import Button from 'react-bootstrap/Button';\nimport '../App.css';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imageURL: '',\n      imageName: '',\n      correctedImageName: '',\n      test_imageURL: '/root/file-upload/uploads/test_docs/thumb1.jpg',\n      correctedImage: null,\n      correctedImageURL: '',\n      // file: null,\n      file: colorNetLogo,\n      // file: = {process.env.PUBLIC_URL + '/orange.png'},\n      correctedFile:null,\n      //following line is correct initial setup, going to try and have placeholder image here too\n      // correctedImageBinary: null\n      //following line is jsut testing\n      // uploadInput: [],\n      files: null,\n      correctImageNamesArray: [],\n      correctImagesList: [],\n      //very perplexed by how I should go about ensuring that the names and images are in line\n      // i probably need to make a list of dicts so that everything stays together nicely.\n      correctImageBinaryArray: [],\n      index : 0,\n      // setIndex : 0,\n\n      // handleSelect : (selectedIndex, e) => {\n      //   setIndex(selectedIndex);\n      // }\n    };\n\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdateImage = this.handleUpdateImage.bind(this);\n    this.handleUpdateImage2 = this.handleUpdateImage2.bind(this);\n    this.handleUpdateImage3 = this.handleUpdateImage3.bind(this);\n    this.imageErrorFunction = this.imageErrorFunction(this);\n    this.handleUploadImageMultiple = this.handleUploadImageMultiple.bind(this);\n    this.handleUploadImageMultiSingle = this.handleUploadImageMultiSingle.bind(this);\n    this.handleDownloadFiles = this.handleDownloadFiles.bind(this);\n\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleFindIndex = this.handleFindIndex.bind(this);\n\n\n  }\n\n  handleSelect(selectedIndex, e) {\n    this.setState({\n      index: selectedIndex,\n    });\n  }\n  \n\n  imageErrorFunction(event){\n    console.log(\"error again\")\n  }\n\n  //This is for displaying the initial image\n  handleChange(event){\n    console.log(event.target.files[0])\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0])\n  \n    })\n  }\n\n  handleFindIndex(fileName){\n    for(let i = 0; i < ((this.state.correctImageNamesArray).length); i++){\n      if(this.state.correctImageNamesArray[i] === fileName){\n        return i;\n      }\n    }\n  }\n  //i am pretty sure this is updating the image as it fails the get request after the fact \n  //This does not really work well, inexplicably fails pretty often.\n  handleUpdateImage(fileName){\n    console.log(fileName)\n    setTimeout(() =>  { this.setState({\n      correctedImageURL: `${process.env.PUBLIC_URL}/corrected_images/${fileName}`\n      // correctedFile: URL.createObjectURL((this.correctedImageURL).blob())\n    })  \n      //this.state.correctedFile = URL.createObjectURL((this.correctedImageURL).blob())\n      // fetch(this.state.correctedImageURL)\n      // .then(res => res.blob())\n      // .then(blob => {\n      //   this.state.correctedFile = URL.createObjectURL(blob);\n        \n      // })\n    }, 3000);\n    console.log(`${process.env.PUBLIC_URL}/corrected_images/${fileName}`)\n  }\n\n  handleUpdateImage2(fileName){\n    console.log(\"updateImage2 called\");\n    //I know that this is not at all proper, this is more just testing the endpoint it it cna receive the calls correctly.\n    //this.correctedImageURL = fetch('/api/getImage?image=' + fileName, {method: 'GET'});\n    fetch('/api/getImage?image=' + fileName, {method: 'GET'}).then((response) => {\n      response.json().then((body) => {\n        console.log(\"inside fetch\");\n        console.log(body.msg)\n        // this.state.correctedImageBinary = body.img\n        this.setState({correctedImageBinary: body.img})\n      });\n    });\n  }\n\n  handleUpdateImage3(fileName){\n    console.log(\"updateImage3 called\");\n    //I know that this is not at all proper, this is more just testing the endpoint it it cna receive the calls correctly.\n    //this.correctedImageURL = fetch('/api/getImage?image=' + fileName, {method: 'GET'});\n    fetch('/api/getImage?image=' + fileName, {method: 'GET'}).then((response) => {\n      response.json().then((body) => {\n        var currentIndex = -1;\n        for(let i = 0; i < ((this.state.correctImageNamesArray).length); i++){\n          if(this.state.correctImageNamesArray[i] === fileName){\n            currentIndex = i;\n          }\n        }\n\n        // this.setState({correctedImageBinary: body.img})\n        // this.setState({correctImageBinaryArray[currentIndex]: body.img})\n        // console.log(\"binary  update: \" + body.img);\n        const updatedArray = [...this.state.correctImageBinaryArray];\n\n        // Update the value at the specified index\n        updatedArray[currentIndex] = body.img;\n\n        // Now, use setState() to update the state with the new array\n        this.setState({ correctImageBinaryArray: updatedArray });\n        //this.state.correctImageBinaryArray[currentIndex] = body.img;\n      });\n    });\n  }\n\n  // working post method\n  handleUploadImage(ev) {\n    ev.preventDefault();\n    console.log(\"hey\")\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n    fetch('/api/upload', {\n      method: 'POST',\n      body: data,\n      'Content-Type': 'image/*',\n    }).then((response) => {\n      response.json().then((body) => {\n        // this.setState({ imageURL: `../../../uploads/test_docs/${body.file}` });\n        console.log(body)\n        this.setState({correctedImageName: `${body.CorrectedFileName}`})\n        //this.setState({correctedImage: })\n        console.log(\"new correctedImageName: \")\n        // this is the one which i have been using //this.handleUpdateImage(body.CorrectedFileName)\n        //Subsequent line is new attempt\n        this.handleUpdateImage2(body.CorrectedFileName)\n      });\n    });\n    console.log(\"finish\")\n  }\n\n  handleUploadImageMultiSingle(){\n    console.log(\"multi single func\");\n    console.log((this.uploadInput.files).length);\n    this.setState({correctImageNamesArray: []});\n\n    //TODO gotta make a few more changes to ensure it is using the array of filenames/image data\n    for(let i = 0; i < ((this.uploadInput.files).length); i++){\n      const data = new FormData();\n      data.append('file', this.uploadInput.files[i]);\n      fetch('/api/upload', {\n        method: 'POST',\n        body: data,\n      }).then((response) => {\n        response.json().then((body) => {\n          console.log(body);\n          this.setState({correctImageBinaryArray: [...this.state.correctImageBinaryArray, 'placeholder']})\n          this.setState({correctImageNamesArray: [...this.state.correctImageNamesArray, `${body.CorrectedFileName}`]})\n          this.handleUpdateImage3(body.CorrectedFileName)\n        });\n      });\n    }\n    console.log(this.state.correctImageNamesArray);\n    console.log(\"binaryArray _\"+ this.state.correctImageBinaryArray + \"_\")\n  }\n\n  handleDownloadFiles(){\n    console.log(\"inside download function\");\n    console.log(this.state.correctImageNamesArray);\n    for(let i = 0; i < ((this.state.correctImageNamesArray).length); i++){\n      fetch('/api/downloadImage?image=' + this.state.correctImageNamesArray[i], {method: 'GET'})\n      .then(response => response.blob())\n      .then(blob => {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement('a');\n          a.href = url;\n          // a.download = \"filename.xlsx\";\n          a.download = this.state.correctImageNamesArray[i]\n          document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n          a.click();    \n          a.remove();\n      });\n    }\n  }\n\n  handleUploadImageMultiple() {\n    console.log(\"in multiple\");\n    const data = new FormData();\n    console.log((this.uploadInput.files).length);\n    data.append('numImages', (this.uploadInput.files).length);\n    for(let i = 0; i< (this.uploadInput.files).length; i++){\n      console.log(this.uploadInput.files[i]);\n      // data.append('file', this.uploadInput.files[i]);\n      // data.append('filename', this.fileName.value);\n      this.currentImageKey = \"image\" + i;\n      // console.log(this.currentImageKey);\n      data.append(this.currentImageKey, this.uploadInput.files[i]);\n\n    }\n    // console.log(data);\n    fetch('/api/uploadMultiple', {\n      method: 'POST',\n      body: data,\n    }).then((response) => {\n      response.json().then((body) => {\n        console.log(body);\n      });\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"inputButton\">\n          <input variant=\"primary\" ref={(ref) => { this.uploadInput = ref; }} type=\"file\"  onChange={this.handleChange} multiple />\n          {/* <input type=\"file\" onChange={this.handleChange} /> */}\n        </div>\n        <br />\n        {/* Multiple image upload, does work now*/}\n        {/* <div>\n          <button type=\"button\" onClick={() => {this.handleUploadImageMultiple()}}>Process Multiple</button>\n        </div> */}\n        {/* Following is working implementation for single images */}\n        {/* <div>\n          <button type=\"button\" onClick={this.handleUploadImage}>Process</button>\n        </div> */}\n        {/*Multi Single image upload*/}\n        <div className=\"centerButton\">\n          <button variant=\"secondary\" type=\"button\" onClick={this.handleUploadImageMultiSingle}>Process Multiple</button>\n        </div>\n\n        {/* FOLLOWING LINE IS PROPER FUNCITONALITY */}\n        {/* <img src = {this.state.file} alt = \"original\"/> */}\n        <p> {this.state.correctedImageName} </p>\n        {/* <img src = {`${process.env.PUBLIC_URL}/corrected_images/${this.state.correctedImageURL}`} alt = \"corrected image\" /> */}\n        \n        {/* TODO FOLLOWING LINE IS WHAT USED TO WORK BEFORE GET FUNC */}\n        {/* <img src = {this.state.correctedImageURL} alt = \"corrected\"/> */}\n        {/* <img src = {this.state.correctedFile} alt = \"Corrected Image\"/> */}\n\n        {/* CORR FOLLOWING LINE IS NEW PROPER FUNCTIONALITY */}\n        {/* {this.state.correctedImageBinary ? <img src={`data:image/jpg;base64,${this.state.correctedImageBinary}`}/>: ''} */}\n        \n        <br/>\n\n        {/* <div className=\"CompareImage\">\n        {/* <div style={{maxWidth: '600px'}}> */}\n        {/*  <ReactCompareImage leftImage = {this.state.file} rightImage = {`data:image/jpg;base64,${this.state.correctedImageBinary}`} />\n        </div> */}\n\n        {/* <Container>\n          <Row>\n            {this.state.correctImageNamesArray.map((k) => (\n              <Col key={k} xs={12} md={4} lg={3}>\n                <Card>\n                  <Card.Img src=\"https://via.placeholder.com/150x75\"/>\n\n                  <Card.Body>\n                    <Card.Title> {this.state.correctImageNamesArray[k]} </Card.Title>\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Container> */}\n        {/* <Container  style={{maxWidth: '100%', height: 'auto'}}> */}\n        <Container className=\"CaroContainer\"> \n          {/* <Carousel variant=\"dark\" activeIndex={this.state.index} onSelect={this.state.handleSelect}> */}\n          {/* <Carousel variant=\"dark\" onSelect={this.handleSelect()}> */}\n          <Carousel className=\"CaroCarousel\" variant=\"dark\" slide={false} touch={true} interval={null} activeIndex={this.state.index} onSelect={this.handleSelect}>\n            {/*working implementation, just want to test and play around {this.state.correctImageNamesArray.map((k) => ( */}\n            {this.state.correctImageNamesArray.map(() => (\n              <Carousel.Item className=\"CaroItem\">\n                {/* <img src=\"https://via.placeholder.com/150x75\"/> */}\n                <div >\n                  <img className=\"CaroImage\" src={`data:image/jpg;base64,${this.state.correctImageBinaryArray[this.state.index]}`}/>\n                  {/* <ReactCompareImage leftImage = {this.uploadInput.files[this.state.index]} rightImage = {`data:image/jpg;base64,${this.state.correctImageBinaryArray[this.state.index]}`} /> */}\n                </div>\n                <Carousel.Caption>\n                  {/* Deliberately removed<p>{this.state.correctImageNamesArray[this.state.index]}</p> */}\n                  {console.log(\"index \" + this.state.index)}\n                </Carousel.Caption>\n              </Carousel.Item>\n            ))}\n          </Carousel>\n        </Container>\n\n        <br/>\n        {/* <CardGroup>\n          {this.state.correctImageNamesArray.map(() => (\n              <Card>\n                <Card.Img src\n              </Card>\n          ))}\n        </CardGroup> */}\n        <Container>\n          <Row>\n            {this.state.correctImageNamesArray.map((k) => (\n              <Col key={k} xs={12} md={4} lg={3}>\n                <Card onChange={console.log(k + \" Clicked!\")}>\n                  {/* {cardDataIndex = this.handleFindIndex(k)} */}\n                  <Card.Img src={`data:image/jpg;base64,${this.state.correctImageBinaryArray[this.handleFindIndex(k)]}`}/>\n                  {console.log(\"k: \" + k + \" cardDataIndex: \" + this.handleFindIndex(k))}\n\n                  <Card.Body>\n                    <Card.Title> {this.state.correctImageNamesArray[this.handleFindIndex(k)]} </Card.Title>\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Container>\n\n        {/* <div>\n          <button type=\"button\" >Share</button>\n        </div> */}\n        <br/>\n        <div className=\"centerButton\">\n          <button type=\"button\" onClick={this.handleDownloadFiles}>Download Images</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}